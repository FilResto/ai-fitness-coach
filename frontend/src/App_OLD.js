import React, { useState } from 'react';

// Import all our organized components
import PersonalInfoForm from './components/forms/PersonalInfoForm';
import GoalsForm from './components/forms/GoalsForm';
import GymPhotosForm from './components/forms/GymPhotosForm';
import WorkoutPlanResult from './components/forms/WorkoutPlanResult';
import StepIndicator from './components/common/StepIndicator';

// Import hooks
import { useAdSense } from './hooks/useAdSense';
import { useDailyLimit } from './hooks/useDailyLimit';
import { useLocalStorage } from './hooks/useLocalStorage';

// Import services and utilities
import { generateWorkoutPlan } from './services/workoutService';
import { steps } from './utils/constants';

function AIFitnessCoach() {
  const [currentStep, setCurrentStep] = useState(0);
  const { isLoaded } = useAdSense();
  const { dailyLimit, consumeDaily } = useDailyLimit();

  // Form state using custom localStorage hook
  const [personalInfo, setPersonalInfo] = useLocalStorage(0, {
    fullName: '',
    age: '',
    gender: '',
    height: '',
    weight: '',
    fitnessExperience: ''
  });

  const [goals, setGoals] = useLocalStorage(1, {
    primaryGoal: '',
    workoutFrequency: '',
    sessionDuration: '',
    muscleGroupFocus: '',
    healthIssues: ''
  });

  // Gym photos state (not saved to localStorage for space reasons)
  const [gymPhotos, setGymPhotos] = useState({
    uploadedFiles: [],
    isDragOver: false
  });

  // AI Workout Plan State
  const [workoutPlan, setWorkoutPlan] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationError, setGenerationError] = useState(null);
  const [errors, setErrors] = useState({});

  // Handler functions
  const handlePersonalInfoChange = (field, value) => {
    const newData = { ...personalInfo, [field]: value };
    setPersonalInfo(newData);

    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const handleGoalsChange = (field, value) => {
    const newData = { ...goals, [field]: value };
    setGoals(newData);

    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const handlePersonalInfoNext = (validationErrors) => {
    if (validationErrors) {
      setErrors(validationErrors);
    } else {
      setCurrentStep(1);
      setErrors({});
    }
  };

  const handleGoalsNext = (validationErrors) => {
    if (validationErrors) {
      setErrors(validationErrors);
    } else {
      setCurrentStep(2);
      setErrors({});
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleGeneratePlan = async () => {
    if (!dailyLimit.canGenerate) {
      return;
    }

    setIsGenerating(true);
    setGenerationError(null);

    try {
      const userData = { ...personalInfo, ...goals };
      console.log('Generating workout plan with data:', userData);

      const plan = await generateWorkoutPlan(userData, gymPhotos.uploadedFiles);
      setWorkoutPlan(plan);
      setCurrentStep(3);

      // Consume daily limit
      consumeDaily();

    } catch (error) {
      console.error('Error generating plan:', error);
      setGenerationError(error.message);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleUpgradeClick = () => {
    // Qui integrerai Stripe/PayPal in futuro
    alert('Premium incoming!');
  };

  const downloadPlanAsPDF = () => {
    let content = `AI FITNESS COACH - WORKOUT PLAN\n`;
    content += `=====================================\n\n`;
    content += `${workoutPlan.title}\n`;
    content += `${workoutPlan.description}\n\n`;
    content += `Frequency: ${workoutPlan.frequency}\n`;
    content += `Session Duration: ${workoutPlan.sessionDuration}\n`;
    content += `Generated: ${new Date().toLocaleDateString()}\n`;
    content += `AI Generated: ${workoutPlan.isAiGenerated ? 'Yes' : 'No (Demo Plan)'}\n\n`;

    workoutPlan.workouts.forEach((workout, index) => {
      content += `\n${workout.day}\n`;
      content += `${'='.repeat(workout.day.length)}\n`;
      content += `Focus: ${workout.focus}\n\n`;
      content += `WARM-UP:\n${workout.warmup}\n\n`;
      content += `EXERCISES:\n`;

      workout.exercises.forEach((exercise, exerciseIndex) => {
        content += `${exerciseIndex + 1}. ${exercise.name}\n`;
        content += `   Sets: ${exercise.sets} | Reps: ${exercise.reps} | Rest: ${exercise.rest}\n`;
        content += `   Muscles: ${exercise.muscles} | Intensity: ${exercise.intensity}\n`;
        if (exercise.notes) {
          content += `   Notes: ${exercise.notes}\n`;
        }
        content += `\n`;
      });

      content += `COOL-DOWN:\n${workout.cooldown}\n\n`;
    });

    content += `PROGRESSION:\n${workoutPlan.progression}\n\n`;
    content += `IMPORTANT NOTES:\n${workoutPlan.importantNotes}\n\n`;
    content += `\n---\nGenerated by AI Fitness Coach\nMade with ❤️ for your fitness journey`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `ai-fitness-plan-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleCreateNewPlan = () => {
    setCurrentStep(0);
    // Clear saved data per nuovo piano
    setPersonalInfo({
      fullName: '', age: '', gender: '', height: '', weight: '', fitnessExperience: ''
    });
    setGoals({
      primaryGoal: '', workoutFrequency: '', sessionDuration: '', muscleGroupFocus: '', healthIssues: ''
    });
    setWorkoutPlan(null);
    setErrors({});
  };

  // Render the appropriate step
  const renderCurrentStep = () => {
    switch (currentStep) {
      case 0:
        return (
          <PersonalInfoForm
            personalInfo={personalInfo}
            onPersonalInfoChange={handlePersonalInfoChange}
            errors={errors}
            onNext={handlePersonalInfoNext}
          />
        );
      
      case 1:
        return (
          <GoalsForm
            goals={goals}
            onGoalsChange={handleGoalsChange}
            errors={errors}
            onNext={handleGoalsNext}
            onPrevious={handlePrevious}
          />
        );
      
      case 2:
        return (
          <GymPhotosForm
            gymPhotos={gymPhotos}
            onGymPhotosChange={setGymPhotos}
            onPrevious={handlePrevious}
            onGeneratePlan={handleGeneratePlan}
            dailyLimit={dailyLimit}
            isGenerating={isGenerating}
            generationError={generationError}
            onUpgradeClick={handleUpgradeClick}
          />
        );
      
      case 3:
        return (
          <WorkoutPlanResult
            workoutPlan={workoutPlan}
            personalInfo={personalInfo}
            onUpgradeClick={handleUpgradeClick}
            onDownloadPDF={downloadPlanAsPDF}
            onCreateNewPlan={handleCreateNewPlan}
          />
        );
      
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 to-blue-600">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Show header and step indicator only for steps 0-1 */}
        {currentStep < 2 && (
          <>
            <div className="text-center mb-8">
              <h1 className="text-4xl font-bold text-white mb-2">AI Fitness Coach</h1>
              <p className="text-white/80 text-lg">Your personalized fitness journey starts here</p>
            </div>

            <StepIndicator 
              steps={steps} 
              currentStep={currentStep} 
              showHorizontal={false}
            />
          </>
        )}

        {/* Show horizontal step indicator for step 2 */}
        {currentStep === 2 && (
          <StepIndicator 
            steps={steps} 
            currentStep={currentStep} 
            showHorizontal={true}
          />
        )}

        {/* Render the current step */}
        {renderCurrentStep()}
      </div>
    </div>
  );
}

export default function App() {
  return <AIFitnessCoach />;
}

